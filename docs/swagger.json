{
    "swagger": "2.0",
    "info": {
        "description": "SHBucket is a distributed object storage system similar to AWS S3",
        "title": "SHBucket API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "SHBucket Support",
            "email": "support@shbucket.local"
        },
        "license": {
            "name": "MIT",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/api-keys": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a paginated list of API keys for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api-keys"
                ],
                "summary": "List API keys",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of API keys",
                        "schema": {
                            "$ref": "#/definitions/apikey.ListAPIKeysResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new API key for programmatic access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api-keys"
                ],
                "summary": "Create API key",
                "parameters": [
                    {
                        "description": "API key creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "API key created successfully",
                        "schema": {
                            "$ref": "#/definitions/apikey.CreateAPIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api-keys/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an API key by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api-keys"
                ],
                "summary": "Delete API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/apikey.DeleteAPIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change the password for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Password change details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.ChangePasswordCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/user.ChangePasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user with email and password, returns JWT token for subsequent requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/user.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Logout user and invalidate session token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/user.LogoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterCommand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/user.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/buckets": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of buckets for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "List buckets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of buckets",
                        "schema": {
                            "$ref": "#/definitions/bucket.ListBucketsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new storage bucket with specified settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Create new bucket",
                "parameters": [
                    {
                        "description": "Bucket creation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bucket.CreateBucketCommand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Bucket created successfully",
                        "schema": {
                            "$ref": "#/definitions/bucket.CreateBucketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/buckets/{bucketId}/files": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a list of all files in a specific bucket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "List files in bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucketId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Files retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/file.ListFilesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Bucket not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload a file to the specified bucket with authentication",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Upload file to bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucketId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/file.DistributedUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/buckets/{bucketId}/files/{fileId}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a specific file from a bucket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Delete file from bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucketId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/file.DeleteFileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/buckets/{bucketId}/files/{fileId}/info": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get metadata and information about a specific file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Get file metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucketId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File metadata retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/file.GetFileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/buckets/{bucketId}/files/{fileId}/signed-url": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a temporary signed URL for secure file access with optional single-use functionality",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Generate signed URL for file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucketId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signed URL generation parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed URL generated successfully",
                        "schema": {
                            "$ref": "#/definitions/file.GenerateSignedURLResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/buckets/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve detailed information about a specific bucket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Get bucket by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bucket information",
                        "schema": {
                            "$ref": "#/definitions/bucket.GetBucketResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid bucket ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Bucket not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update bucket settings and metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Update bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Bucket update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bucket.UpdateBucketCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bucket updated successfully",
                        "schema": {
                            "$ref": "#/definitions/bucket.UpdateBucketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a storage bucket by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "buckets"
                ],
                "summary": "Delete bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bucket deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/bucket.DeleteBucketResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/file/{bucketId}/{fileId}": {
            "get": {
                "description": "Serve file content directly with support for signed URLs, API keys, and image processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream",
                    "image/jpeg",
                    "image/png"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Serve file content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bucket ID",
                        "name": "bucketId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Signed URL signature for temporary access",
                        "name": "signature",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Image width for scaling (images only)",
                        "name": "width",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Image height for scaling (images only)",
                        "name": "height",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 85,
                        "description": "Image quality for JPEG compression",
                        "name": "quality",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Predefined resolution (144p, 240p, 360p, 480p, 720p, 1080p, 1440p, 2160p, 4k)",
                        "name": "resolution",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File content served successfully"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/node/auth-key": {
            "get": {
                "description": "Retrieve the authentication key for a specific node by URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Get node auth key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node URL",
                        "name": "url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Node authentication key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/node/ping": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Allow a node to ping the master node to update health status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Node ping",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node URL",
                        "name": "url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ping successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/node/register": {
            "post": {
                "description": "Allow a node to register itself without authentication (for node setup)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Self-register storage node",
                "parameters": [
                    {
                        "description": "Node self-registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Node registered successfully with auth key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/nodes": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a list of all storage nodes in the distributed system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "List storage nodes",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Show only active nodes",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Nodes retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/node.ListNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Register a new storage node in the distributed system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Register storage node",
                "parameters": [
                    {
                        "description": "Node registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterNodeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Node registered successfully",
                        "schema": {
                            "$ref": "#/definitions/node.RegisterNodeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/nodes/install": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Install and configure a new storage node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Install storage node",
                "parameters": [
                    {
                        "description": "Node installation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NodeInstallationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Node installed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.NodeInstallationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/nodes/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Remove a storage node from the distributed system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Delete storage node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Node deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/nodes/{id}/health": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Check the health status of a specific storage node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "Check node health",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Node health status",
                        "schema": {
                            "$ref": "#/definitions/models.NodeHealthCheckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/setup/info": {
            "get": {
                "description": "Retrieve system status and information after setup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "setup"
                ],
                "summary": "Get system information",
                "responses": {
                    "200": {
                        "description": "System information",
                        "schema": {
                            "$ref": "#/definitions/models.SystemInfoResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/setup/master": {
            "post": {
                "description": "Initialize the system as a master node with database and admin user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "setup"
                ],
                "summary": "Setup master node",
                "parameters": [
                    {
                        "description": "Master setup configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MasterSetupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Master setup successful",
                        "schema": {
                            "$ref": "#/definitions/setup.MasterSetupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or setup failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/setup/node": {
            "post": {
                "description": "Initialize the system as a storage node connected to a master",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "setup"
                ],
                "summary": "Setup node",
                "parameters": [
                    {
                        "description": "Node setup configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NodeSetupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Node setup successful",
                        "schema": {
                            "$ref": "#/definitions/setup.NodeSetupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or setup failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/setup/status": {
            "get": {
                "description": "Check if the system has been set up and configured",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "setup"
                ],
                "summary": "Check setup status",
                "responses": {
                    "200": {
                        "description": "Setup status information",
                        "schema": {
                            "$ref": "#/definitions/setup.CheckSetupResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a paginated list of all users (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include user buckets",
                        "name": "include_buckets",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include user sessions",
                        "name": "include_sessions",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include all related data",
                        "name": "include_all",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "$ref": "#/definitions/user.ListUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get information about a specific user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/user.GetUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apikey.CreateAPIKeyResponse": {
            "type": "object",
            "properties": {
                "api_key": {
                    "$ref": "#/definitions/models.APIKeyResponse"
                },
                "message": {
                    "type": "string"
                },
                "plain_key": {
                    "description": "Only returned on creation",
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "apikey.DeleteAPIKeyResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "apikey.ListAPIKeysResponse": {
            "type": "object",
            "properties": {
                "api_keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.APIKeyResponse"
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "bucket.CreateBucketCommand": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "auth_rule": {
                    "$ref": "#/definitions/models.AuthRuleResponse"
                },
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "type": "string",
                    "maxLength": 63,
                    "minLength": 3
                },
                "owner_id": {
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/models.BucketSettingsResponse"
                }
            }
        },
        "bucket.CreateBucketResponse": {
            "type": "object",
            "properties": {
                "bucket": {
                    "$ref": "#/definitions/models.BucketResponse"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "bucket.DeleteBucketResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "bucket.GetBucketResponse": {
            "type": "object",
            "properties": {
                "bucket": {
                    "$ref": "#/definitions/models.BucketResponse"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "bucket.ListBucketsResponse": {
            "type": "object",
            "properties": {
                "buckets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BucketResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "bucket.UpdateBucketCommand": {
            "type": "object",
            "properties": {
                "auth_rule": {
                    "$ref": "#/definitions/models.AuthRuleResponse"
                },
                "bucket_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "settings": {
                    "$ref": "#/definitions/models.BucketSettingsResponse"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "bucket.UpdateBucketResponse": {
            "type": "object",
            "properties": {
                "bucket": {
                    "$ref": "#/definitions/models.BucketResponse"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "entities.APIKeyPermission": {
            "type": "object",
            "properties": {
                "buckets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "read": {
                    "type": "boolean"
                },
                "sign_urls": {
                    "type": "boolean"
                },
                "write": {
                    "type": "boolean"
                }
            }
        },
        "file.DeleteFileResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "file.DistributedUploadResponse": {
            "type": "object",
            "properties": {
                "file": {
                    "$ref": "#/definitions/models.FileResponse"
                },
                "message": {
                    "type": "string"
                },
                "storage_node": {
                    "$ref": "#/definitions/models.StorageNodeResponse"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "file.GenerateSignedURLResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "file.GetFileResponse": {
            "type": "object",
            "properties": {
                "file": {
                    "$ref": "#/definitions/models.FileResponse"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "file.ListFilesResponse": {
            "type": "object",
            "properties": {
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FileResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "models.APIKeyResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "key_prefix": {
                    "type": "string"
                },
                "last_used": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/definitions/entities.APIKeyPermission"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.AuthRuleResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "enabled": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.BucketResponse": {
            "type": "object",
            "properties": {
                "auth_rule": {
                    "$ref": "#/definitions/models.AuthRuleResponse"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/models.BucketSettingsResponse"
                },
                "stats": {
                    "$ref": "#/definitions/models.BucketStatsResponse"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.BucketSettingsResponse": {
            "type": "object",
            "properties": {
                "allow_overwrite": {
                    "type": "boolean"
                },
                "allowed_extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowed_mime_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "blocked_extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "blocked_mime_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "encryption": {
                    "type": "boolean"
                },
                "max_file_size": {
                    "type": "integer"
                },
                "max_files_per_bucket": {
                    "type": "integer"
                },
                "max_total_size": {
                    "type": "integer"
                },
                "public_read": {
                    "type": "boolean"
                },
                "require_content_type": {
                    "type": "boolean"
                },
                "versioning": {
                    "type": "boolean"
                }
            }
        },
        "models.BucketStatsResponse": {
            "type": "object",
            "properties": {
                "last_access": {
                    "type": "string"
                },
                "total_files": {
                    "type": "integer"
                },
                "total_size": {
                    "type": "integer"
                }
            }
        },
        "models.FileMetadataResponse": {
            "type": "object",
            "properties": {
                "cache_control": {
                    "type": "string"
                },
                "content_disposition": {
                    "type": "string"
                },
                "content_encoding": {
                    "type": "string"
                },
                "content_type": {
                    "type": "string"
                },
                "custom_metadata": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "models.FileResponse": {
            "type": "object",
            "properties": {
                "accessed_at": {
                    "type": "string"
                },
                "auth_rule": {
                    "$ref": "#/definitions/models.AuthRuleResponse"
                },
                "bucket_id": {
                    "type": "string"
                },
                "checksum": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/models.FileMetadataResponse"
                },
                "mime_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "original_name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "models.MasterSetupRequest": {
            "type": "object",
            "required": [
                "admin_email",
                "admin_password",
                "admin_username",
                "storage_path",
                "system_name"
            ],
            "properties": {
                "admin_email": {
                    "type": "string"
                },
                "admin_password": {
                    "type": "string",
                    "minLength": 6
                },
                "admin_username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "default_auth_rule": {
                    "$ref": "#/definitions/models.AuthRuleResponse"
                },
                "default_settings": {
                    "$ref": "#/definitions/models.BucketSettingsResponse"
                },
                "jwt_secret": {
                    "type": "string"
                },
                "max_storage": {
                    "type": "integer",
                    "minimum": 1
                },
                "storage_path": {
                    "type": "string"
                },
                "system_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                }
            }
        },
        "models.NodeHealthCheckResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "is_healthy": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "node_id": {
                    "type": "string"
                },
                "response_time_ms": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.NodeInstallationRequest": {
            "type": "object",
            "required": [
                "name",
                "storage_path"
            ],
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "max_storage": {
                    "type": "integer",
                    "minimum": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "storage_path": {
                    "type": "string"
                }
            }
        },
        "models.NodeInstallationResponse": {
            "type": "object",
            "properties": {
                "config_path": {
                    "type": "string"
                },
                "install_path": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "node": {
                    "$ref": "#/definitions/models.StorageNodeResponse"
                },
                "start_command": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.NodeSetupRequest": {
            "type": "object",
            "required": [
                "master_api_key",
                "master_url",
                "node_api_key",
                "node_name",
                "storage_path"
            ],
            "properties": {
                "master_api_key": {
                    "type": "string"
                },
                "master_url": {
                    "type": "string"
                },
                "max_storage": {
                    "type": "integer",
                    "minimum": 1
                },
                "node_api_key": {
                    "type": "string",
                    "minLength": 10
                },
                "node_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "storage_path": {
                    "type": "string"
                }
            }
        },
        "models.RegisterNodeRequest": {
            "type": "object",
            "required": [
                "auth_key",
                "name",
                "url"
            ],
            "properties": {
                "auth_key": {
                    "type": "string",
                    "minLength": 32
                },
                "is_active": {
                    "type": "boolean"
                },
                "max_storage": {
                    "type": "integer",
                    "minimum": 0
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "priority": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.StorageNodeResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_healthy": {
                    "type": "boolean"
                },
                "last_ping": {
                    "type": "string"
                },
                "max_storage": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "used_storage": {
                    "type": "integer"
                }
            }
        },
        "models.SystemInfoResponse": {
            "type": "object",
            "properties": {
                "free_storage": {
                    "type": "integer"
                },
                "is_healthy": {
                    "type": "boolean"
                },
                "last_checked": {
                    "type": "string"
                },
                "max_storage": {
                    "type": "integer"
                },
                "node_count": {
                    "type": "integer"
                },
                "setup_type": {
                    "type": "string"
                },
                "storage_path": {
                    "type": "string"
                },
                "system_name": {
                    "type": "string"
                },
                "used_storage": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_login": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "node.ListNodesResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StorageNodeResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "node.RegisterNodeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "node": {
                    "$ref": "#/definitions/models.StorageNodeResponse"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "setup.CheckSetupResponse": {
            "type": "object",
            "properties": {
                "is_setup": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "node_name": {
                    "type": "string"
                },
                "setup_type": {
                    "type": "string"
                }
            }
        },
        "setup.MasterSetupResponse": {
            "type": "object",
            "properties": {
                "admin_user": {
                    "$ref": "#/definitions/models.UserResponse"
                },
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "setup.NodeSetupResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "node": {
                    "$ref": "#/definitions/models.StorageNodeResponse"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "user.ChangePasswordCommand": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 6
                },
                "old_password": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "user.ChangePasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "user.GetUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/models.UserResponse"
                }
            }
        },
        "user.ListUsersResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "total": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserResponse"
                    }
                }
            }
        },
        "user.LoginCommand": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "user.LoginResponse": {
            "type": "object",
            "properties": {
                "expires_in": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.UserResponse"
                }
            }
        },
        "user.LogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "user.RegisterCommand": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "viewer",
                        "editor",
                        "manager",
                        "admin"
                    ]
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "user.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/models.UserResponse"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API Key for authentication",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}